// Code generated by go-bindata.
// sources:
// assets/index.html
// assets/js/logic.js
// DO NOT EDIT!

package webcamserver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xcf\x4e\xc3\x30\x0c\xc6\xef\x7b\x0a\xe3\x07\xc0\x2f\xe0\x56\x9a\xc6\x8e\x08\x04\x5c\x38\xa1\xb4\x31\x6b\xa6\xa6\x89\x12\x17\x34\x21\xde\x1d\x35\x59\x35\xfe\x5c\x38\x39\x9f\x93\xef\xe7\xf8\xe3\xab\x9b\xbb\xdd\xd3\xf3\xfd\x1e\x06\xf5\x63\xbb\xd9\x70\xad\x00\x00\x3c\x88\xb1\xf5\x58\x64\xee\x93\x8b\x0a\x39\xf5\x0d\x52\x6f\xbc\x24\x43\x1f\xbb\xed\xed\xfe\x61\xfb\x49\x59\x93\x18\x4f\xef\xd2\xd1\x31\xd3\x18\x0e\xae\xbf\x3e\x66\x6c\x99\xaa\xed\x8c\xa4\x0b\x93\xbb\x60\x4f\xdf\xf0\xaf\x21\xf9\x8b\x2c\x2d\x37\xc5\x59\xc1\xd9\x06\xeb\xb8\x97\xc9\x78\x41\xd0\x53\x94\x06\x07\x67\xad\x4c\x08\x4b\x6f\x7d\x80\xf0\x66\xc6\x59\x1a\x5c\xff\x85\xf4\x0b\xd9\xcd\xaa\x61\x3a\x23\xaa\xc0\x32\x21\xab\x49\x8a\xed\xe3\x52\x98\xea\xcd\xff\xbd\x21\x2e\xd6\x10\xff\x3a\x99\x7e\x2e\xc6\xce\x1f\xd6\x30\x6a\x02\x4c\x25\xf3\xaf\x00\x00\x00\xff\xff\xa3\x71\x33\x3c\x8b\x01\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 395, mode: os.FileMode(420), modTime: time.Unix(1581601970, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsLogicJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\x3d\x8f\xdb\x30\x0c\x86\xf7\xfc\x0a\x56\x5d\x2c\x5c\xa1\xec\x17\x78\xba\x76\x28\xd0\x8f\x21\x28\x3a\x16\xaa\xc4\xa4\xc2\xc9\xa4\x2b\xd1\x31\xda\x22\xff\xbd\xb0\xfc\x01\xdf\x5d\x92\xe5\x36\x89\x78\x49\x3e\x7a\xd4\x07\xf2\xdc\x1b\xeb\xfd\x87\x13\x92\x7c\x0a\x59\x90\x30\x55\xea\xfd\xd7\xcf\x0f\x4c\x32\xd4\xd8\x7a\xf4\xea\x1d\x1c\x3a\x72\x12\x98\x2a\x0d\xff\x36\x00\x00\x8e\x29\x0b\x38\xdb\x60\xb2\x50\x83\x67\xd7\x35\x48\x62\x7e\x77\x98\xfe\xec\x31\xa2\x13\x4e\x95\x7a\x3b\x26\x7e\x90\x6d\x50\x69\x73\xb2\xb1\xc3\xd2\xbf\x1a\x12\xd9\x41\x0d\x13\x4d\x64\x67\x87\x45\xbb\x55\xa0\xcf\xdf\x52\x80\x1a\x54\x9f\xf3\xfd\x76\xab\xe0\x6e\xe8\x31\xbf\x38\x0b\xdc\x81\xda\x8e\x3b\x4a\x7d\x02\x1a\xaa\x59\x12\xda\x46\x3d\xdd\xc6\x11\x4d\xe4\x63\xa5\x3e\x52\x90\x60\x63\xf8\x5b\xb6\xc1\x81\x13\x3c\xed\x07\xc7\x4d\x1b\x51\xd0\x2b\xbd\xdb\x94\x01\x27\x9b\x20\xb3\x7b\x44\x19\xef\x57\x1f\x9d\xc5\x26\x51\xfa\x82\x5a\x17\x83\x7b\x5c\xfb\xc4\x59\xe8\x82\xf9\x02\xf5\x81\x89\xd0\x49\xa0\x23\x08\x17\xca\x22\x44\x2f\xe9\x91\x09\x6a\x20\xec\xe1\x3b\xfe\xdc\x97\x7b\x35\xa5\x9e\xc5\x0c\x53\x83\x39\xdb\x23\x42\x7d\x05\xe3\x05\xc1\x17\x74\x0c\x6d\x0a\x39\xf2\x7d\x01\x40\xe3\xad\x58\xbd\x5b\x5a\xce\xe5\x74\x9e\x4d\xdd\x30\xc3\xed\x6b\xc4\x84\x03\x54\x6f\xc6\x87\xdc\x26\xe6\xd9\x0a\xb7\x48\xe3\x1f\xae\xc3\x09\xa5\x4b\xb4\xe6\xbf\xec\x7e\x2f\xdc\xb6\x83\x79\x37\x7d\x02\x93\x99\x67\x3d\x17\xeb\x22\x67\xac\xf4\x62\xe2\xac\x37\xff\x03\x00\x00\xff\xff\xd9\xcf\xbb\x3c\x63\x03\x00\x00")

func jsLogicJsBytes() ([]byte, error) {
	return bindataRead(
		_jsLogicJs,
		"js/logic.js",
	)
}

func jsLogicJs() (*asset, error) {
	bytes, err := jsLogicJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/logic.js", size: 867, mode: os.FileMode(420), modTime: time.Unix(1581416060, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
	"js/logic.js": jsLogicJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"js": &bintree{nil, map[string]*bintree{
		"logic.js": &bintree{jsLogicJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

